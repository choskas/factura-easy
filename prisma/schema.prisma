// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User_Organization @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String            @id @default(cuid())
  sessionToken String            @unique
  userId       String
  expires      DateTime
  user         User_Organization @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model User_Organization {
  id              String    @id @default(uuid())
  facturapi_id    String?   @unique
  api_token       String?   @unique
  name            String?
  maternal_name   String?
  last_name       String?
  rfc             String?
  email           String    @unique
  emailVerified   Boolean?
  phone           String?   @unique
  entreprise_name String?
  image           String?
  password        String
  accounts        Account[]
  sessions        Session[]
  address         Address[]
  addressId       String?
}

model Address {
  id           String            @id @default(uuid())
  street       String
  exterior     String
  interior     String
  neighborhood String
  city         String
  municipality String
  zip          String
  state        String
  country      String
  userId       String
  user         User_Organization @relation(fields: [userId], references: [id], onDelete: Cascade)
}

