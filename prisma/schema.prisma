// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  user_id           String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User_Organization @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String            @id @default(cuid())
  sessionToken String            @unique
  user_id      String
  expires      DateTime
  user         User_Organization @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Status {
  IN_VALIDATION
  VALIDATED
  SUSPENDED
}

model User_Organization {
  id               String      @id @default(uuid())
  facturapi_id     String?     @unique
  facturapi_token  String?     @unique
  api_token        String?     @unique
  status           Status      @default(IN_VALIDATION)
  name             String?
  maternal_name    String?
  last_name        String?
  rfc              String?
  email            String      @unique
  emailVerified    Boolean?    @default(false)
  phone            String?     @unique
  entreprise_name  String?
  image            String?
  password         String
  available_folios Int?        @default(0)
  accounts         Account[]
  sessions         Session[]
  address          Address?
  addressId        String?
  customers        Customers[]
  customersId      String[]
  products         Products[]
  productsIds      String[]
  invoices         Invoices[]
  InvoicesIds      String[]
}

model Products {
  id           String            @id @default(uuid())
  facturapi_id String
  sku          String
  description  String
  product_key  String
  price        Decimal
  user_id      String
  user         User_Organization @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Customers {
  id           String            @id @default(uuid())
  facturapi_id String
  legal_name   String
  tax_id       String            @unique
  tax_system   String
  email        String
  phone        String?
  user_id      String
  user         User_Organization @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Address {
  id           String            @id @default(uuid())
  street       String
  exterior     String
  interior     String?
  neighborhood String
  municipality String
  zip          String
  state        String
  country      String            @default("MEX")
  user_id      String            @unique
  user         User_Organization @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Invoices {
  id               String            @id @default(uuid())
  facturapi_id     String
  status           String
  varification_url String?
  date             String
  total            Int
  folio_number     Int
  user_id          String
  user             User_Organization @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
